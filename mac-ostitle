#include <windhawk.h>
#include <windows.h>
#include <uxtheme.h>
#include <dwmapi.h>
#pragma comment(lib, "dwmapi.lib")

std::vector<std::wstring> g_targetProcesses;

WINDHAWK_SETTINGS_DEFINE(
    L"targetApps",
    L"Target applications",
    L"notepad.exe;calc.exe"
);

bool ShouldApplyToProcess() {
    wchar_t exePath[MAX_PATH];
    GetModuleFileNameW(NULL, exePath, MAX_PATH);
    std::wstring exe = exePath;
    size_t pos = exe.find_last_of(L"\\/");
    if (pos != std::wstring::npos)
        exe = exe.substr(pos + 1);
    for (auto& app : g_targetProcesses) {
        if (_wcsicmp(app.c_str(), exe.c_str()) == 0)
            return true;
    }
    return false;
}

LRESULT CALLBACK WndProc_Hook(
    HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam,
    UINT_PTR, DWORD_PTR
) {
    switch (uMsg) {
        case WM_NCPAINT:
        case WM_NCACTIVATE: {
            LRESULT result = Wh_CallOriginalWndProc(hwnd, uMsg, wParam, lParam);
            HDC hdc = GetWindowDC(hwnd);
            if (hdc) {
                RECT rect;
                GetWindowRect(hwnd, &rect);
                OffsetRect(&rect, -rect.left, -rect.top);
                RECT captionRect = rect;
                captionRect.bottom = GetSystemMetrics(SM_CYCAPTION);
                wchar_t title[256];
                GetWindowTextW(hwnd, title, ARRAYSIZE(title));
                SetBkMode(hdc, TRANSPARENT);
                SetTextColor(hdc, RGB(255, 255, 255));
                DrawTextW(
                    hdc, title, -1, &captionRect,
                    DT_CENTER | DT_VCENTER | DT_SINGLELINE
                );
                int btnY = 6;
                int radius = 6;
                int spacing = 20;
                HBRUSH redBrush   = CreateSolidBrush(RGB(255, 95, 86));
                HBRUSH yellowBrush= CreateSolidBrush(RGB(255, 189, 46));
                HBRUSH greenBrush = CreateSolidBrush(RGB(39, 201, 63));
                HGDIOBJ old = SelectObject(hdc, redBrush);
                Ellipse(hdc, 8, btnY, 8+radius*2, btnY+radius*2);
                SelectObject(hdc, yellowBrush);
                Ellipse(hdc, 8+spacing, btnY, 8+spacing+radius*2, btnY+radius*2);
                SelectObject(hdc, greenBrush);
                Ellipse(hdc, 8+spacing*2, btnY, 8+spacing*2+radius*2, btnY+radius*2);
                SelectObject(hdc, old);
                DeleteObject(redBrush);
                DeleteObject(yellowBrush);
                DeleteObject(greenBrush);
                ReleaseDC(hwnd, hdc);
            }
            return 0;
        }
        case WM_NCLBUTTONDOWN: {
            int x = GET_X_LPARAM(lParam);
            int y = GET_Y_LPARAM(lParam);
            RECT rect;
            GetWindowRect(hwnd, &rect);
            int btnY = 6;
            int radius = 6;
            int spacing = 20;
            POINT pt = { x - rect.left, y - rect.top };
            RECT redBtn   = {8, btnY, 8+radius*2, btnY+radius*2};
            RECT yellowBtn= {8+spacing, btnY, 8+spacing+radius*2, btnY+radius*2};
            RECT greenBtn = {8+spacing*2, btnY, 8+spacing*2+radius*2, btnY+radius*2};
            if (PtInRect(&redBtn, pt)) {
                PostMessage(hwnd, WM_CLOSE, 0, 0);
                return 0;
            }
            if (PtInRect(&yellowBtn, pt)) {
                ShowWindow(hwnd, SW_MINIMIZE);
                return 0;
            }
            if (PtInRect(&greenBtn, pt)) {
                if (IsZoomed(hwnd)) ShowWindow(hwnd, SW_RESTORE);
                else ShowWindow(hwnd, SW_MAXIMIZE);
                return 0;
            }
        }
    }
    return Wh_CallOriginalWndProc(hwnd, uMsg, wParam, lParam);
}

BOOL Wh_ModInit() {
    std::wstring apps = Wh_GetStringSetting(L"targetApps");
    g_targetProcesses.clear();
    size_t pos = 0;
    while ((pos = apps.find(L";")) != std::wstring::npos) {
        g_targetProcesses.push_back(apps.substr(0, pos));
        apps.erase(0, pos + 1);
    }
    if (!apps.empty())
        g_targetProcesses.push_back(apps);
    if (!ShouldApplyToProcess())
        return TRUE;
    Wh_SetWndProcHook(WndProc_Hook);
    return TRUE;
}

void Wh_ModUninit() {
}
